name: CI/CD Pipeline

on:
  push:
    branches:
      - develop
      - feature/main
      - feature/prod
  pull_request:
    branches:
      - develop
      - feature/main
      - feature/prod

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # checkout do código-fonte
      - name: Checkout code
        uses: actions/checkout@v2

      # .NET SDK
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'

      # restaurar pacotes NuGet para o projeto principal e testes
      - name: Restore dependencies
        run: |
          dotnet restore Fiap.API.ReportCity/Fiap.API.ReportCity.csproj
          dotnet restore Fiap.API.ReportCity.Test/Fiap.API.ReportCity.Test.csproj

      # compilar o projeto principal e testes
      - name: Build project
        run: |
          dotnet build Fiap.API.ReportCity/Fiap.API.ReportCity.csproj --configuration Release
          dotnet build Fiap.API.ReportCity.Test/Fiap.API.ReportCity.Test.csproj --configuration Release
      # construir e publicar Docker
      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Fiap.API.ReportCity/Dockerfile
          push: true
          tags: emeryguilherme/fiapapireportcity:latest

  test:
    runs-on: ubuntu-latest
    needs: build

    steps:
      # checkout do código-fonte
      - name: Checkout code
        uses: actions/checkout@v2

      # .NET SDK
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'

      # testes automatizados
      - name: Run tests
        run: dotnet test Fiap.API.ReportCity.Test/Fiap.API.ReportCity.Test.csproj --no-build --verbosity normal

  deploy-staging:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/develop'

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up kubectl
        uses: azure/setup-kubectl@v2
        with:
          version: 'latest'

      - name: Deploy to Staging
        run: |
          kubectl apply -f deployment.yaml --namespace=staging

  deploy-production:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/feature/prod'

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up kubectl
        uses: azure/setup-kubectl@v2
        with:
          version: 'latest'

      - name: Deploy to Production
        run: |
          kubectl apply -f deployment.yaml --namespace=production
